= What It Does
:toc:
:toc-placement!:
:toc-title: pass:[<b>Table of Contents</b>]

This buildout is for testing use with chromanode, specifically to run it
in regtest mode with bitcoind and in doing so having unlimited access to
(regtest) bitcoins. The purpose is to facilitate testing bitcoin
dependent services, including transactions and confirmations, without
having to rely on bitcoin or testnet faucets. 

toc::[]

== What it contains

The buildout contains a
json-rpc server through which you can tell bitcoind to add confirmations
on top of submitted transactions.

This buildout builds from source and installs everything in its own
local directory:

* postgresql
* bitcoind in regtest mode
* node.js and npm
* A small json-rpc server for mining new blocks from test scripts
* A regtest verson of bitcoin-abe, a crypto currency block explorer, to
see what's actually in the regtest blockchain
* supervisord to run the above servers and to run the chromanode servers


== Dependencies

The following packages are needed for bitcoind and postgresql to compile
on Ubuntu 14.04LTS:

`build-essential libtool autotools-dev autoconf libssl-dev libboost-all-dev pkg-config postgresql-server-dev-all python-virtualenv\` libdb4.8++-dev`

The libdb4.8++-dev is not part of the standard Ubuntu repositories. You
can add the following repository under `/etc/apt/sources.list.d/` to get
it:

----
deb http://ppa.launchpad.net/bitcoin/bitcoin/ubuntu trusty main
#  deb-src http://ppa.launchpad.net/bitcoin/bitcoin/ubuntu trusty main
----

Run:

`apt-get install build-essential libtool autotools-dev autoconf libssl-dev libboost-all-dev pkg-config postgresql-server-dev-all python-virtualenv\` libdb4.8++-dev`

On Debian 7, the libdb4.8++-dev and friends (libdb4.8, libdb4.8-dev)
must be downloaded from a newer Debian and be manually installed with
dpkg -i, or there may be a third party repository as well.


== Installation


Clone the chromanode-regtest-backend repository (this repository). Go
into the cloned repository. Type:

----
virtualenv .
----

The bitcoin-abe block explorer is currently cloned from the regtest
branch of

git@github.com:jeorgen/bitcoin-abe.git

Issue:

----
./bin/python bootstrap
./bin/buildout
----

The last one will take a bit of time (typically 5-20 minutes), since it
will download and build postgresql, node.js, npm and bitcoind from
source and install an assortment of python packages.


=== Install Chromanode


The chromanode server is currently cloned from the develop branch of
https://github.com/chromaway/chromanode/

and will appear as "chromanode" in src/.

Install the dependencies for chromanode with:

----
cd chromanode
../bin/npm install
----

cd into node_modules/coloredcoinjs-lib, issue:

----
npm run compile
----


=== Settings For Postgresql With Chromanode


Initialize the postgresql database cluster with the password `masonit`:

----
./bin/initdb -U chromaway -W var/databases/postgres/
----

Start the server:

----
./bin/postgres -N 500 -i -p 17520 -D var/databases/postgres
----

In another terminal window, create a database by the name of `dual`:

----
./bin/createdb -O chromaway -U chromaway -W -h 127.0.0.1 -p 17520 dual
----

You can now terminate the postgresql server with Ctrl-c.


== Running The System


Issue:

----
./bin/supervisord
----

then check on the system with:

----
./bin/supervisorctl
----

Here is a sample output from ./bin/supervisorctl:

----
abe                              RUNNING   pid 21947, uptime 0:00:01
bitcoind-controller              RUNNING   pid 21946, uptime 0:00:01
bitcoind-server                  RUNNING   pid 21941, uptime 0:00:01
cc-scanner-chromanode            RUNNING   pid 21944, uptime 0:00:01
cuber-explorer                   STOPPED   Not started
postgresql-server                RUNNING   pid 21942, uptime 0:00:01
scanner-chromanode               RUNNING   pid 21943, uptime 0:00:01
service-chromanode               RUNNING   pid 21945, uptime 0:00:01
----

The chromanode service will serve http on port 17581, with the default
settings in its YAML config file. The bitcoind-controller will serve
json-rpc over http on port 17580.


=== Proxy example

This example for Apache:

----
<VirtualHost *:80>
  ServerName chromanode-regtest.example.com
    ProxyPreserveHost On
    Timeout 600
    # proxy the bitcoind controller, map it to 
    # '/regtest' in the url name space
    ProxyPass /regtest/ http://localhost:17580/
    ProxyPassReverse /regtest/ http://localhost:17580/
    
    # proxy the chromanode server
    ProxyPass / http://localhost:17581/
    ProxyPassReverse / http://localhost:17581/
</VirtualHost>
----


== Troubleshooting


If a service doesn't start or fails, you can run it from the command
line to see what the problem is. Supervisord runs each service from a
virtual terminal. To check what command it uses for each service, do:

----
less parts/supervisor/supervisord.conf 
----

...and take the appropriate command from there and run it from a
terminal to see what the problem is. var/log/ also has logs for each
service.


== Configuration of ports, auth settings and all other settings


You can change the setting in the buildout to:

* Have different ports for the servers
* Change user names and passwords
* Refer to external bitcoind and postgresql servers
* Run several buildouts on the same machine by moving all ports an
offset amount


=== How To Change Settings In Buildout


Unless specfied otherwise, the buildout command will read its
instructions from the `./buildout.cfg` file. In the stock install, the
buildout.cfg file is just pointing to the `./etc/base.cfg` file.

You should not change the base.cfg file directly, if possible. You can
however add stuff to the buildout.cfg file that modifies the base.cfg
file. Here are the rules:


=== Modifying a section


A buildout section start with a title in brackets, such as `[config]`.
If you add a section to buildout.cfg, buildout will first read the
section from base.cfg, and then apply the changes found in buildout.cfg.
So for example writing this in buildout.cfg:

----
[config]
    port_offset = 100
----

...will change the port_offset setting from 0 to 100, but will keep all
other settings from the base.cfg file. See
https://pypi.python.org/pypi/zc.buildout/2.4.5#multiple-configuration-files
for reference info

An equal sign`=` will replace the previous value of that setting. By
typing `+=` you can instead add to the setting. This only makes sense
for settings that are lists. Example: If base.cfg has the setting:

----
[foo]
bar =
    baz
    bletch
    flum
----

...then putting this in buildout.cfg

----
[foo]
bar +=
    fab
----

...will add fab to the values of `bar`. See
https://pypi.python.org/pypi/zc.buildout/2.4.5#adding-and-removing-options
for reference info.


=== Running Multiple Buildouts On The Same Server


There is now a setting called `port_offset` in the config section in
etc/base.cfg. It is by default set to 0. By setting it to e.g 100, all
ports are shifted 100 numbers up. 

TIP: In this way you can run many
independent buildouts in parallel

All ports (except bitcoin-abe for the moment) are between 17500 and
17599 by default. Default value of port_offset is 0 but e.g. 100 would
shift all server ports and accompanying config files and command line
parameters 100 numbers up to in between 17600 and 17699 .

Remember to rerun buildout after having changed the settings.


=== Changing Individual Ports And Authentication Settings


Port and authentication settings can be changed in the config section.
For any port and auth changes to take effect:

* Stop supervisord (./bin/supervisorctl shutdown)
* Rerun buildout (./bin/buildout)
* restart supervisor (./bin/supervisord)

Things that can be changed From the config section:

* database_host - host for the postgresql server. Most likely 127.0.0.1
or equivalent, since it is a part of the buildout
* database_port_base - port for the postgresql server.
* bitcoind_port_base - peer port for the bitcoind server
* rpc_user - JSON-RPC user name for accessing bitcoind
* rpc_password- JSON-RPC password for accessing bitcoind
* rpc_port_base- JSON-RPC port for accessing bitcoind
* chromanode_service_port_base - Port for chromanode
* controller_port_base - JSON-RPC http port for mining blocks, from your
test scripts. This port should be proxied externally
* bitcoin_regtest_data_dir - where the regtest blocks are stored. A
value of `default` means in the standard place in ~/.bitcoin/regtest
* abe_config_location - location of config file for bitcoin-abe
* abe_port_base - port that the bitcoin-abe explorer can be accessed at.
This port should be proxied externally


=== Disabling Certain Servers


Maybe you do not want to build a bitcoind or a postgresql inside of the
buildout. In that case copy the parts directive in the `[buildout]`
section of etc/base.cfg and paste it into ./buildout.cfg.

Change it from this:

----
[buildout]
parts =
    bitcoind
    bitcoind-symlinks
    postgresql
    pgsql-symlinks
    node-js
    py-interpreter
    supervisor
----

To this:

----
[buildout]
parts =
    node-js
    py-interpreter
    supervisor
----

...to disable the building of postgresql and bitcoind. You can also just
comment out the lines with `#`, but the hash mark must be flush with the
left margin.

Supervisor will still try to start the now non-existing servers, but
that does not have any propagating consequences. Make sure you edit the
config settings to point at your external servers. You do that best by
pasting a copy of the `[config]` section and only include the settings
you want to change.

And then re-run buildout.


== Constructing A Regtest Blockchain

----
./bin/bitcoin-cli -regtest  -rpcuser=chromaway -rpcpassword=masonit -regtest  -rpcport=8332 -port=8333 generate 101
----

101 is the minimum for you to get any coins to spend in regtest mode.

Or if you need more coins and blocks:

----
./bin/bitcoin-cli -regtest  -rpcuser=chromaway -rpcpassword=masonit -regtest  -rpcport=8332 -port=8333 generate 3000
----

Mining 3000 blocks will take minutes to hours, depending on your
hardware.


== Spending Bitcoins


Generate an address with:

----
./bin/bitcoin-cli -rpcuser=chromaway -rpcpassword=masonit -regtest -rpcport=8332 -port=8333 getnewaddress
----

and make a payment to it:

----
./bin/bitcoin-cli -rpcuser=chromaway -rpcpassword=masonit -regtest -rpcport=8332 -port=8333 sendtoaddress <address> 12
----

Then bury your transaction under some blocks:

----
./bin/bitcoin-cli -rpcuser=chromaway -rpcpassword=masonit -regtest -rpcport=8332 -port=8333 generate 6
----

Then use the dumpprivkey command in bitcoin-cli for that address to get
the private key.

----
./bin/bitcoin-cli -rpcuser=chromaway -rpcpassword=masonit -regtest -rpcport=8332 -port=8333 dumpprivkey <address>
----


== Generating Blocks Through The Bitcoind-controller Server


How do you mine blocks when you are not at the command line? The
bitcoind-controller json-rpc server accepts instructions to mine from
one up to six blocks, so that you can bury your transactions and make
them appear confirmed. Beware that it takes a bit of time to mine a
block, tens of seconds (depending on your hardware). Here an example
using pyjsonrpc for instructing bitcoind to mine one block:

----
import pyjsonrpc
client = pyjsonrpc.HttpClient(url = "http://localhost:17580")
client.add_confirmations(1)
----

Will give a result similar to:

----
{u'result': [u'00000001c2cf5c571d09117b832ec1b6a36c72c768504ffc28fce0b443ef6a3a']}
----

With the use of a fronting Apache, Nginx or similar as a proxy, you can
fold the bitcoind-controller server into some unused part of the url
namespace of the chromanode web server. For example under:

----
/regtest
----


== Using The Bitcoin-abe Regtest Blockchain Explorer

Currently the bitcoin-abe regtest blockchain explorer is not "url-safe"
in the sense that it can be folded into the url name space (It could
also be that I have made a mistake in the proxy conf). It wants to be at
the root. So use a different domain for it, or a different port.
